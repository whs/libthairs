use ::libc;
extern "C" {
    pub type _ThBrk;
    fn printf(_: *const libc::c_char, _: ...) -> libc::c_int;
    fn exit(_: libc::c_int) -> !;
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    fn th_brk_new(dictpath: *const libc::c_char) -> *mut ThBrk;
    fn th_brk_delete(brk: *mut ThBrk);
    fn th_brk_find_breaks(
        brk: *mut ThBrk,
        s: *const thchar_t,
        pos: *mut libc::c_int,
        pos_sz: size_t,
    ) -> libc::c_int;
    fn th_brk_insert_breaks(
        brk: *mut ThBrk,
        in_0: *const thchar_t,
        out: *mut thchar_t,
        out_sz: size_t,
        delim: *const libc::c_char,
    ) -> libc::c_int;
    fn iconv_close(__cd: iconv_t) -> libc::c_int;
    fn iconv_open(__tocode: *const libc::c_char, __fromcode: *const libc::c_char) -> iconv_t;
    fn iconv(
        __cd: iconv_t,
        __inbuf: *mut *mut libc::c_char,
        __inbytesleft: *mut size_t,
        __outbuf: *mut *mut libc::c_char,
        __outbytesleft: *mut size_t,
    ) -> size_t;
}
pub type size_t = libc::c_ulong;
pub type thchar_t = libc::c_uchar;
pub type ThBrk = _ThBrk;
pub type iconv_t = *mut libc::c_void;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _Sample {
    pub str_0: *const libc::c_char,
    pub n_brk: libc::c_int,
    pub brk_pos: [libc::c_int; 100],
    pub ins_str: *const libc::c_char,
}
pub type Sample = _Sample;
pub const MAXLINELENGTH: libc::c_int = 100 as libc::c_int;
pub const NULL: libc::c_int = 0 as libc::c_int;
#[no_mangle]
pub static mut TestSamples: [Sample; 12] = [
    {
        let mut init = _Sample {
            str_0: b"12% is 12 % and (12.00)% is (12.00) %\0" as *const u8 as *const libc::c_char,
            n_brk: 6 as libc::c_int,
            brk_pos: [
                4 as libc::c_int,
                7 as libc::c_int,
                12 as libc::c_int,
                16 as libc::c_int,
                25 as libc::c_int,
                28 as libc::c_int,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            ins_str: b"12% |is |12 % |and |(12.00)% |is |(12.00) %\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = _Sample {
            str_0: b"ten% of all \xE0\xB8\xAA\xE0\xB8\xB4\xE0\xB8\x9A%\xE0\xB8\x82\xE0\xB8\xAD\xE0\xB8\x87\xE0\xB8\x97\xE0\xB8\xB1\xE0\xB9\x89\xE0\xB8\x87\xE0\xB8\xAB\xE0\xB8\xA1\xE0\xB8\x94\0"
                as *const u8 as *const libc::c_char,
            n_brk: 5 as libc::c_int,
            brk_pos: [
                5 as libc::c_int,
                8 as libc::c_int,
                12 as libc::c_int,
                16 as libc::c_int,
                19 as libc::c_int,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            ins_str: b"ten% |of |all |\xE0\xB8\xAA\xE0\xB8\xB4\xE0\xB8\x9A%|\xE0\xB8\x82\xE0\xB8\xAD\xE0\xB8\x87|\xE0\xB8\x97\xE0\xB8\xB1\xE0\xB9\x89\xE0\xB8\x87\xE0\xB8\xAB\xE0\xB8\xA1\xE0\xB8\x94\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = _Sample {
            str_0: b"$12 is $ 12 and $(12.00) is $ (12.00)\0" as *const u8 as *const libc::c_char,
            n_brk: 6 as libc::c_int,
            brk_pos: [
                4 as libc::c_int,
                7 as libc::c_int,
                12 as libc::c_int,
                16 as libc::c_int,
                25 as libc::c_int,
                28 as libc::c_int,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            ins_str: b"$12 |is |$ 12 |and |$(12.00) |is |$ (12.00)\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = _Sample {
            str_0: b"Brazilian R$2 Nicaraguan C$10 U$S5 US$5 5$ 5 $ Micro$oft C++\0" as *const u8
                as *const libc::c_char,
            n_brk: 8 as libc::c_int,
            brk_pos: [
                10 as libc::c_int,
                14 as libc::c_int,
                25 as libc::c_int,
                30 as libc::c_int,
                35 as libc::c_int,
                40 as libc::c_int,
                47 as libc::c_int,
                57 as libc::c_int,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            ins_str: b"Brazilian |R$2 |Nicaraguan |C$10 |U$S5 |US$5 |5$ 5 $ |Micro$oft |C++\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = _Sample {
            str_0: b"\xE0\xB8\xBF12 \xE0\xB8\x9A\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87\xE0\xB9\x80\xE0\xB8\x82\xE0\xB8\xB5\xE0\xB8\xA2\xE0\xB8\x99 12\xE0\xB8\xBF \xE0\xB8\xAB\xE0\xB8\xA3\xE0\xB8\xB7\xE0\xB8\xAD \xE0\xB8\xBF 12 \xE0\xB8\xAB\xE0\xB8\xA3\xE0\xB8\xB7\xE0\xB8\xAD 12 \xE0\xB8\xBF\0"
                as *const u8 as *const libc::c_char,
            n_brk: 7 as libc::c_int,
            brk_pos: [
                4 as libc::c_int,
                8 as libc::c_int,
                14 as libc::c_int,
                18 as libc::c_int,
                23 as libc::c_int,
                28 as libc::c_int,
                33 as libc::c_int,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            ins_str: b"\xE0\xB8\xBF12 |\xE0\xB8\x9A\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87|\xE0\xB9\x80\xE0\xB8\x82\xE0\xB8\xB5\xE0\xB8\xA2\xE0\xB8\x99 |12\xE0\xB8\xBF |\xE0\xB8\xAB\xE0\xB8\xA3\xE0\xB8\xB7\xE0\xB8\xAD |\xE0\xB8\xBF 12 |\xE0\xB8\xAB\xE0\xB8\xA3\xE0\xB8\xB7\xE0\xB8\xAD |12 \xE0\xB8\xBF\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = _Sample {
            str_0: b"\xE0\xB8\xBF(12.00) \xE0\xB8\x9A\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87\xE0\xB8\x81\xE0\xB9\x87\xE0\xB9\x80\xE0\xB8\x82\xE0\xB8\xB5\xE0\xB8\xA2\xE0\xB8\x99 \xE0\xB8\xBF (12.00) \xE0\xB8\xAB\xE0\xB8\xA3\xE0\xB8\xB7\xE0\xB8\xAD (12.00)\xE0\xB8\xBF \xE0\xB8\xAB\xE0\xB8\xA3\xE0\xB8\xB7\xE0\xB8\xAD (12.00) \xE0\xB8\xBF\0"
                as *const u8 as *const libc::c_char,
            n_brk: 8 as libc::c_int,
            brk_pos: [
                9 as libc::c_int,
                13 as libc::c_int,
                15 as libc::c_int,
                21 as libc::c_int,
                31 as libc::c_int,
                36 as libc::c_int,
                45 as libc::c_int,
                50 as libc::c_int,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            ins_str: b"\xE0\xB8\xBF(12.00) |\xE0\xB8\x9A\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87|\xE0\xB8\x81\xE0\xB9\x87|\xE0\xB9\x80\xE0\xB8\x82\xE0\xB8\xB5\xE0\xB8\xA2\xE0\xB8\x99 |\xE0\xB8\xBF (12.00) |\xE0\xB8\xAB\xE0\xB8\xA3\xE0\xB8\xB7\xE0\xB8\xAD |(12.00)\xE0\xB8\xBF |\xE0\xB8\xAB\xE0\xB8\xA3\xE0\xB8\xB7\xE0\xB8\xAD |(12.00) \xE0\xB8\xBF\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = _Sample {
            str_0: b"#hashtag #\xE0\xB9\x81\xE0\xB8\xAE\xE0\xB8\x8A\xE0\xB9\x81\xE0\xB8\x97\xE0\xB9\x87\xE0\xB8\x81 #1 5# hello\xE0\xB8\xAA\xE0\xB8\xA7\xE0\xB8\xB1\xE0\xB8\xAA\xE0\xB8\x94\xE0\xB8\xB5\0"
                as *const u8 as *const libc::c_char,
            n_brk: 5 as libc::c_int,
            brk_pos: [
                9 as libc::c_int,
                18 as libc::c_int,
                21 as libc::c_int,
                24 as libc::c_int,
                29 as libc::c_int,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            ins_str: b"#hashtag |#\xE0\xB9\x81\xE0\xB8\xAE\xE0\xB8\x8A\xE0\xB9\x81\xE0\xB8\x97\xE0\xB9\x87\xE0\xB8\x81 |#1 |5# |hello|\xE0\xB8\xAA\xE0\xB8\xA7\xE0\xB8\xB1\xE0\xB8\xAA\xE0\xB8\x94\xE0\xB8\xB5\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = _Sample {
            str_0: b"e.g. Ph.D.Engineering M.A.(Linguistics) \xE0\xB8\xA1.\xE0\xB8\x84.\xE0\xB8\xA1\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\xB2\xE0\xB8\x84\xE0\xB8\xA1\xE0\xB8\xA8\xE0\xB8\x81\xE0\xB8\x99\xE0\xB8\xB5\xE0\xB9\x89\0"
                as *const u8 as *const libc::c_char,
            n_brk: 8 as libc::c_int,
            brk_pos: [
                5 as libc::c_int,
                10 as libc::c_int,
                22 as libc::c_int,
                26 as libc::c_int,
                40 as libc::c_int,
                44 as libc::c_int,
                50 as libc::c_int,
                52 as libc::c_int,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            ins_str: b"e.g. |Ph.D.|Engineering |M.A.|(Linguistics) |\xE0\xB8\xA1.\xE0\xB8\x84.|\xE0\xB8\xA1\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\xB2\xE0\xB8\x84\xE0\xB8\xA1|\xE0\xB8\xA8\xE0\xB8\x81|\xE0\xB8\x99\xE0\xB8\xB5\xE0\xB9\x89\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = _Sample {
            str_0: b"(s)he (may) meet person(s)\0" as *const u8 as *const libc::c_char,
            n_brk: 3 as libc::c_int,
            brk_pos: [
                6 as libc::c_int,
                12 as libc::c_int,
                17 as libc::c_int,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            ins_str: b"(s)he |(may) |meet |person(s)\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = _Sample {
            str_0: b"\xE0\xB8\xAA\xE0\xB8\xA7\xE0\xB8\xB1\xE0\xB8\xAA\xE0\xB8\x94\xE0\xB8\xB5\xE0\xB8\x84\xE0\xB8\xA3\xE0\xB8\xB1\xE0\xB8\x9A \xE0\xB8\x81\xE0\xB8\xAD.\xE0\xB8\xA3\xE0\xB8\xA1\xE0\xB8\x99. \xE0\xB8\x99\xE0\xB8\xB5\xE0\xB9\x88\xE0\xB9\x80\xE0\xB8\x9B\xE0\xB9\x87\xE0\xB8\x99\xE0\xB8\x81\xE0\xB8\xB2\xE0\xB8\xA3\xE0\xB8\x97\xE0\xB8\x94\xE0\xB8\xAA\xE0\xB8\xAD\xE0\xB8\x9A\xE0\xB8\x95\xE0\xB8\xB1\xE0\xB8\xA7\xE0\xB9\x80\xE0\xB8\xAD\xE0\xB8\x87\0"
                as *const u8 as *const libc::c_char,
            n_brk: 7 as libc::c_int,
            brk_pos: [
                6 as libc::c_int,
                11 as libc::c_int,
                19 as libc::c_int,
                22 as libc::c_int,
                26 as libc::c_int,
                29 as libc::c_int,
                34 as libc::c_int,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            ins_str: b"\xE0\xB8\xAA\xE0\xB8\xA7\xE0\xB8\xB1\xE0\xB8\xAA\xE0\xB8\x94\xE0\xB8\xB5|\xE0\xB8\x84\xE0\xB8\xA3\xE0\xB8\xB1\xE0\xB8\x9A |\xE0\xB8\x81\xE0\xB8\xAD.\xE0\xB8\xA3\xE0\xB8\xA1\xE0\xB8\x99. |\xE0\xB8\x99\xE0\xB8\xB5\xE0\xB9\x88|\xE0\xB9\x80\xE0\xB8\x9B\xE0\xB9\x87\xE0\xB8\x99|\xE0\xB8\x81\xE0\xB8\xB2\xE0\xB8\xA3|\xE0\xB8\x97\xE0\xB8\x94\xE0\xB8\xAA\xE0\xB8\xAD\xE0\xB8\x9A|\xE0\xB8\x95\xE0\xB8\xB1\xE0\xB8\xA7\xE0\xB9\x80\xE0\xB8\xAD\xE0\xB8\x87\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = _Sample {
            str_0: b"\xE0\xB8\x9E\xE0\xB8\xB1\xE0\xB8\x99\xE0\xB8\x98\xE0\xB8\xB8\xE0\xB9\x8C\xE0\xB8\x82\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\xA7 \xE0\xB8\x81\xE0\xB8\x8243 \xE0\xB8\x99\xE0\xB9\x89\xE0\xB8\xB3\xE0\xB8\x95\xE0\xB8\xB2\xE0\xB8\xA5\xE0\xB8\x95\xE0\xB9\x88\xE0\xB8\xB3 \xE0\xB8\x81\xE0\xB8\xB4\xE0\xB9\x82\xE0\xB8\xA5\xE0\xB8\xA5\xE0\xB8\xB0 40\xE0\xB8\x9A\xE0\xB8\xB2\xE0\xB8\x97 \xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB8\x94\xE0\xB8\xB2\xE0\xB8\xA9 A4 \xE0\xB9\x83\xE0\xB8\x99 4.3BSD\0"
                as *const u8 as *const libc::c_char,
            n_brk: 12 as libc::c_int,
            brk_pos: [
                6 as libc::c_int,
                11 as libc::c_int,
                16 as libc::c_int,
                22 as libc::c_int,
                26 as libc::c_int,
                30 as libc::c_int,
                33 as libc::c_int,
                35 as libc::c_int,
                39 as libc::c_int,
                46 as libc::c_int,
                49 as libc::c_int,
                52 as libc::c_int,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
            ins_str: b"\xE0\xB8\x9E\xE0\xB8\xB1\xE0\xB8\x99\xE0\xB8\x98\xE0\xB8\xB8\xE0\xB9\x8C|\xE0\xB8\x82\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\xA7 |\xE0\xB8\x81\xE0\xB8\x8243 |\xE0\xB8\x99\xE0\xB9\x89\xE0\xB8\xB3\xE0\xB8\x95\xE0\xB8\xB2\xE0\xB8\xA5|\xE0\xB8\x95\xE0\xB9\x88\xE0\xB8\xB3 |\xE0\xB8\x81\xE0\xB8\xB4\xE0\xB9\x82\xE0\xB8\xA5|\xE0\xB8\xA5\xE0\xB8\xB0 |40|\xE0\xB8\x9A\xE0\xB8\xB2\xE0\xB8\x97 |\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB8\x94\xE0\xB8\xB2\xE0\xB8\xA9 |A4 |\xE0\xB9\x83\xE0\xB8\x99 |4.3BSD\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = _Sample {
            str_0: 0 as *const libc::c_char,
            n_brk: 0 as libc::c_int,
            brk_pos: [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ],
            ins_str: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut utf8_to_tis_iconv: iconv_t = 0 as *const libc::c_void as *mut libc::c_void;
#[no_mangle]
pub static mut tis_to_utf8_iconv: iconv_t = 0 as *const libc::c_void as *mut libc::c_void;
#[no_mangle]
pub unsafe extern "C" fn init_iconv() {
    utf8_to_tis_iconv = iconv_open(
        b"TIS-620\0" as *const u8 as *const libc::c_char,
        b"UTF-8\0" as *const u8 as *const libc::c_char,
    );
    tis_to_utf8_iconv = iconv_open(
        b"UTF-8\0" as *const u8 as *const libc::c_char,
        b"TIS-620\0" as *const u8 as *const libc::c_char,
    );
}
#[no_mangle]
pub unsafe extern "C" fn close_iconv() {
    iconv_close(utf8_to_tis_iconv);
    iconv_close(tis_to_utf8_iconv);
}
#[no_mangle]
pub unsafe extern "C" fn utf8_to_tis(
    mut utf8_str: *const libc::c_char,
    mut tis: *mut thchar_t,
    mut tis_sz: size_t,
) -> size_t {
    let mut in_0: *mut libc::c_char = utf8_str as *mut libc::c_char;
    let mut in_left: size_t = (strlen(in_0)).wrapping_add(1 as libc::c_int as libc::c_ulong);
    let mut out: *mut libc::c_char = tis as *mut libc::c_char;
    let mut out_left: size_t = tis_sz;
    return iconv(
        utf8_to_tis_iconv,
        &mut in_0,
        &mut in_left,
        &mut out,
        &mut out_left,
    );
}
#[no_mangle]
pub unsafe extern "C" fn tis_to_utf8(
    mut tis_str: *const thchar_t,
    mut utf8: *mut libc::c_char,
    mut utf8_sz: size_t,
) -> size_t {
    let mut in_0: *mut libc::c_char = tis_str as *mut libc::c_char;
    let mut in_left: size_t = (strlen(in_0)).wrapping_add(1 as libc::c_int as libc::c_ulong);
    let mut out: *mut libc::c_char = utf8;
    let mut out_left: size_t = utf8_sz;
    return iconv(
        tis_to_utf8_iconv,
        &mut in_0,
        &mut in_left,
        &mut out,
        &mut out_left,
    );
}
#[no_mangle]
pub unsafe extern "C" fn show_breaks(mut brk_pos: *mut libc::c_int, mut n_brk: libc::c_int) {
    let mut i: libc::c_int = 0;
    printf(b"%d breaks: {\0" as *const u8 as *const libc::c_char, n_brk);
    i = 0 as libc::c_int;
    while i < n_brk {
        if i > 0 as libc::c_int {
            printf(b", \0" as *const u8 as *const libc::c_char);
        }
        printf(
            b"%d\0" as *const u8 as *const libc::c_char,
            *brk_pos.offset(i as isize),
        );
        i += 1;
        i;
    }
    printf(b"}\n\0" as *const u8 as *const libc::c_char);
}
#[no_mangle]
pub unsafe extern "C" fn test_samples(
    mut brk: *mut ThBrk,
    mut samples: *const Sample,
) -> libc::c_int {
    let mut success: libc::c_int = 1 as libc::c_int;
    let mut i: libc::c_int = 0;
    i = 0 as libc::c_int;
    while !((*samples.offset(i as isize)).str_0).is_null() {
        let mut tis_str: [thchar_t; 101] = [0; 101];
        let mut brk_pos: [libc::c_int; 100] = [0; 100];
        let mut n_brk: libc::c_int = 0;
        let mut j: libc::c_int = 0;
        let mut ins_str: [thchar_t; 201] = [0; 201];
        let mut utf8_str: [libc::c_char; 301] = [0; 301];
        printf(
            b"Testing: %s\n\0" as *const u8 as *const libc::c_char,
            (*samples.offset(i as isize)).str_0,
        );
        utf8_to_tis(
            (*samples.offset(i as isize)).str_0,
            tis_str.as_mut_ptr(),
            ::core::mem::size_of::<[thchar_t; 101]>() as libc::c_ulong,
        );
        n_brk = th_brk_find_breaks(
            brk,
            tis_str.as_mut_ptr(),
            brk_pos.as_mut_ptr(),
            MAXLINELENGTH as size_t,
        );
        show_breaks(brk_pos.as_mut_ptr(), n_brk);
        if n_brk != (*samples.offset(i as isize)).n_brk {
            printf(
                b"Failed at case #%d: n_brk = %d, expected %d\n\0" as *const u8
                    as *const libc::c_char,
                i,
                n_brk,
                (*samples.offset(i as isize)).n_brk,
            );
            success = 0 as libc::c_int;
        }
        j = 0 as libc::c_int;
        while j < n_brk {
            if brk_pos[j as usize] != (*samples.offset(i as isize)).brk_pos[j as usize] {
                printf(
                    b"Failed at case #%d, brk_pos[%d] = %d, expected %d\n\0" as *const u8
                        as *const libc::c_char,
                    i,
                    j,
                    brk_pos[j as usize],
                    (*samples.offset(i as isize)).brk_pos[j as usize],
                );
                success = 0 as libc::c_int;
            }
            j += 1;
            j;
        }
        th_brk_insert_breaks(
            brk,
            tis_str.as_mut_ptr(),
            ins_str.as_mut_ptr(),
            ::core::mem::size_of::<[thchar_t; 201]>() as libc::c_ulong,
            b"|\0" as *const u8 as *const libc::c_char,
        );
        tis_to_utf8(
            ins_str.as_mut_ptr(),
            utf8_str.as_mut_ptr(),
            ::core::mem::size_of::<[libc::c_char; 301]>() as libc::c_ulong,
        );
        printf(
            b"Segmented: %s\n\0" as *const u8 as *const libc::c_char,
            utf8_str.as_mut_ptr(),
        );
        if strcmp(utf8_str.as_mut_ptr(), (*samples.offset(i as isize)).ins_str) != 0 as libc::c_int
        {
            printf(
                b"Failed at case #%d: ins_str = \"%s\", expected \"%s\"\n\0" as *const u8
                    as *const libc::c_char,
                i,
                utf8_str.as_mut_ptr(),
                (*samples.offset(i as isize)).ins_str,
            );
            success = 0 as libc::c_int;
        }
        i += 1;
        i;
    }
    return success;
}
unsafe fn main_0() -> libc::c_int {
    let mut success: libc::c_int = 0 as libc::c_int;
    let mut brk: *mut ThBrk = th_brk_new(NULL as *const libc::c_char);
    if brk.is_null() {
        printf(b"Unable to create word breaker!\n\0" as *const u8 as *const libc::c_char);
        exit(-(1 as libc::c_int));
    }
    init_iconv();
    success = test_samples(brk, TestSamples.as_ptr());
    close_iconv();
    th_brk_delete(brk);
    return if success != 0 {
        0 as libc::c_int
    } else {
        -(1 as libc::c_int)
    };
}
pub fn main() {
    unsafe { ::std::process::exit(main_0() as i32) }
}
